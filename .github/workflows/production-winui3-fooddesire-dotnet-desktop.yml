# This workflow will build, sign, and package a WinUI 3 MSIX desktop application
# built on .NET.

name: WinUI 3 MSIX app

on:
  pull_request:
    branches: 
        - production-ims
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        configuration: [Release]
        platform: [x64, x86]

    runs-on: windows-latest

    env:
      Solution_Name: FoodDesire

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Install .NET 7
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 7.0.x

      - name: Setting User Secrets
        env:
            CONNECTIONSTRINGS_DEFAULTCONNECTION: ${{ secrets.USERSECRETS_CONNECTIONSTRINGS_DEFAULTCONNECTION }}
            CONNECTIONSTRINGS_STORAGECONNECTION: ${{ secrets.USERSECRETS_CONNECTIONSTRINGS_STORAGECONNECTION }}
            CLIENTID: ${{ secrets.USERSECRETS_CLIENTID }}
            JWT_SIGNINKEY: ${{ secrets.USERSECRETS_JWT_SIGNINKEY }}
        run: |
            dotnet user-secrets set "ConnectionStrings:DefaultConnection" $env:CONNECTIONSTRINGS_DEFAULTCONNECTION --project .\Src\FoodDesire.AppSettings\
            dotnet user-secrets set "ConnectionStrings:StorageConnection" $env:CONNECTIONSTRINGS_STORAGECONNECTION --project .\Src\FoodDesire.AppSettings\
            dotnet user-secrets set "ClientID" $env:CLIENTID --project .\Src\FoodDesire.AppSettings\
            dotnet user-secrets set "Jwt:SignInKey" $env:JWT_SIGNINKEY --project .\Src\FoodDesire.AppSettings\
        shell: pwsh

      - name: Setup MSBuild.exe
        uses: microsoft/setup-msbuild@v1.0.2

      - name: Restore the application
        run: msbuild .\Src\FoodDesire.IMS\ /t:Restore /p:Configuration=$env:Configuration
        env:
          Configuration: ${{ matrix.configuration }}

      - name: Decode the pfx
        run: |
          $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.BASE64_ENCODED_PFX }}")
          $certificatePath = ".\Src\FoodDesire.IMS\GitHubActionsWorkflow.pfx"
          [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)

      - name: Create the app package
        run: msbuild .\Src\FoodDesire.IMS\ /p:Configuration=$env:Configuration /p:Platform=$env:Platform /p:UapAppxPackageBuildMode=$env:Appx_Package_Build_Mode /p:AppxBundle=$env:Appx_Bundle /p:PackageCertificateKeyFile=GitHubActionsWorkflow.pfx /p:AppxPackageDir="$env:Appx_Package_Dir" /p:GenerateAppxPackageOnBuild=true
        env:
          Appx_Bundle: Never
          Appx_Package_Build_Mode: SideloadOnly
          Appx_Package_Dir: Packages\
          Configuration: ${{ matrix.configuration }}
          Platform: ${{ matrix.platform }}

      - name: Get app version
        run: |
          $xml = [xml](Get-Content .\Src\FoodDesire.IMS\Package.appxmanifest)
          $version = $xml.Package.Identity.Version
          $version | Out-File -FilePath ".\version.txt"

      - name: Upload MSIX Version
        uses: actions/upload-artifact@v2
        with:
            name: MSIX Version
            path: .\version.txt

      - name: Upload MSIX package
        uses: actions/upload-artifact@v2
        with:
          name: MSIX Package
          path: .\Src\FoodDesire.IMS\Packages
  
  release:
    needs: build
    runs-on: windows-latest
    steps:
      - name: Download MSIX package
        uses: actions/download-artifact@v2
        with:
          name: MSIX Package
          path: .\Packages
    
      - name: Download MSIX version
        uses: actions/download-artifact@v2
        with:
          name: MSIX Version
          path: .\build
    
      - name: Read app version
        id: read_version
        run: |
            echo "::set-output name=version::$(Get-Content .\build\version.txt)"
    
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ steps.read_version.outputs.version }}
        with:
          tag_name: ${{ github.run_number }}
          release_name: Release v${{ env.VERSION }}
          draft: false
          prerelease: false
    
      - name: Zip Packages directory
        env:
         VERSION: ${{ steps.read_version.outputs.version }}
        run: Compress-Archive -Path .\Packages\* -DestinationPath .\FoodDesire_v${{ env.VERSION }}.zip
        shell: pwsh
    
      - name: Upload MSIX Assets
        run: |
          $packages = Get-ChildItem -Path .\Packages -Filter *.msix -Recurse
          foreach ($package in $packages) {
            $response = Invoke-RestMethod `
              -Method POST `
              -Headers @{Authorization = "Bearer $env:GITHUB_TOKEN"} `
              -Uri "${{ steps.create_release.outputs.upload_url }}?name=$($package.Name)" `
              -InFile $package.FullName `
              -ContentType "application/vnd.ms-appx"
          }
        shell: pwsh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
